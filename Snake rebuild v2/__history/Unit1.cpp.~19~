#include "Unit1.h"
#include "Unit2.h"
#include "Unit3.h"
#include <vcl.h>
#include <stdlib.h>
#include <vector>
#pragma comment(lib, "winmm.lib")
#pragma hdrstop
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm1 *Form1;
 __fastcall TForm1::TForm1(TComponent* Owner)
	: TForm(Owner){}
int x, y, dx, dy, len = 3, score = 3;
int snake[1000][2];
bool gameover;
int apple_x, apple_y;
int head_x, head_y; // Добавлен символ головы
int tail_dx , tail_dy;
bool isPaused = false;
int snake_dir[1000][2]; // Добавьте эту строку в начало вашего кода

void spawn_apple()
{
  srand(time(NULL));
	bool isOnSnake;
	do {
		isOnSnake = false;
		apple_x = rand() % Form1->StringGrid1->ColCount;
		apple_y = rand() % Form1->StringGrid1->RowCount;
		if (head_x == apple_x && head_y == apple_y) {
			isOnSnake = true;
		} else {
			for (int i = 0; i < len; i++) {
				if (snake[i][0] == apple_x && snake[i][1] == apple_y) {
					isOnSnake = true;
					break;
				}
			}
		}
	} while (isOnSnake);
	Form1->StringGrid1->Cells[apple_x][apple_y] = "A";
}

void new_game() {
	x = 5; y = 5; dx = 1; dy = 0; len = 3; score = 3;
	head_x = x; head_y = y; // Инициализация позиции головы
	for (int i = 0; i < len; i++) {
		snake[i][0] = x - i;
		snake[i][1] = y;
	}
	gameover = false;
	Form1->Timer1->Enabled = true;
	spawn_apple(); // Спавним первое яблоко
}

void game_over() {
	Form1->MainMenu1->Items->Items[0]->Visible = true;
	Form1->MainMenu1->Items->Items[1]->Visible = true;
	Form1->Image1->Visible = true;
	Form1->Timer1->Enabled = false;
	gameover = true;
	Sleep(300);
	ShowMessage("Игра окончена! Ваш рекорд: " + IntToStr(score));
	Form1->StringGrid1->Visible = false;
	Form1->Label1->Visible = false;
}

void move_snake()
{
	head_x += dx; head_y += dy;
	 for (int i = len - 1; i > 0; i--) {
        snake_dir[i][0] = snake_dir[i - 1][0];
		snake_dir[i][1] = snake_dir[i - 1][1];
	}
	snake_dir[0][0] = dx;
	snake_dir[0][1] = dy;


	for (int i = len - 1; i > 0; i--) {
		snake[i][0] = snake[i - 1][0];
		snake[i][1] = snake[i - 1][1];
	}

	snake[0][0] = head_x;
	snake[0][1] = head_y;

	tail_dx = snake[len - 1][0] - snake[len - 2][0];
	tail_dy = snake[len - 1][1] - snake[len - 2][1];
}

void draw_snake() {
for (int i = 1; i < len - 1; i++) {
	if ((snake_dir[i][0] != 0 && snake_dir[i - 1][1] != 0) || (snake_dir[i][1] != 0 && snake_dir[i - 1][0] != 0))
	{
		if ((snake_dir[i][0] == 1 && snake_dir[i - 1][1] == -1) || (snake_dir[i][1] == 1 && snake_dir[i - 1][0] == -1))
		{
			Form1->StringGrid1->Cells[snake[i][0]][snake[i][1]] = "TL";
		} else if ((snake_dir[i][0] == -1 && snake_dir[i - 1][1] == -1) || (snake_dir[i][1] == 1 && snake_dir[i - 1][0] == 1))
		{
			Form1->StringGrid1->Cells[snake[i][0]][snake[i][1]] = "TR";
		} else if ((snake_dir[i][0] == -1 && snake_dir[i - 1][1] == 1) || (snake_dir[i][1] == -1 && snake_dir[i - 1][0] == 1))
		{
			Form1->StringGrid1->Cells[snake[i][0]][snake[i][1]] = "BR";
		} else if ((snake_dir[i][0] == 1 && snake_dir[i - 1][1] == 1) || (snake_dir[i][1] == -1 && snake_dir[i - 1][0] == -1))
		{
			Form1->StringGrid1->Cells[snake[i][0]][snake[i][1]] = "BL";
        }
    } else {
		if (snake_dir[i][0] != 0) {
			Form1->StringGrid1->Cells[snake[i][0]][snake[i][1]] = "Sh";
        } else {
            Form1->StringGrid1->Cells[snake[i][0]][snake[i][1]] = "Sv";
        }
    }
}

	Form1->StringGrid1->Cells[head_x][head_y] = "H"; // Рисуем голову отдельно
	Form1->StringGrid1->Cells[snake[len - 1][0]][snake[len - 1][1]] = "T"; // Рисуем хвост отдельно

}

void clear_snake() {
	for (int i = 0; i < len; i++) {
		Form1->StringGrid1->Cells[snake[i][0]][snake[i][1]] = "";
	}
	Form1->StringGrid1->Cells[head_x][head_y] = ""; // Очищаем голову отдельно
	Form1->StringGrid1->Cells[snake[len - 1][0]][snake[len - 1][1]] = ""; // Очищаем хвост отдельно
}

void check_collision() {
	if (head_x < 0 || head_x >= Form1->StringGrid1->ColCount || head_y < 0 || head_y >= Form1->StringGrid1->RowCount) {
		game_over();
	}
	for (int i = 1; i < len; i++) {
		if (snake[i][0] == head_x && snake[i][1] == head_y) {
			game_over();
		}
	}
}

void eat_apple() {
if (head_x == apple_x && head_y == apple_y) {
		//PlaySound(TEXT(".\\assets\\apple.wav"), NULL, SND_FILENAME | SND_ASYNC);
		spawn_apple();
		score++;
		Form1->Label1->Caption = "Очки: " + IntToStr(score);
		// Добавляем новый элемент в конец змейки
		snake[len][0] = snake[len - 1][0];
		snake[len][1] = snake[len - 1][1];
		len++;
	}
}

void clear_field() {
	for (int i = 0; i < Form1->StringGrid1->ColCount; i++) {
		for (int j = 0; j < Form1->StringGrid1->RowCount; j++) {
			Form1->StringGrid1->Cells[i][j] = "";
		}
	}
}

void __fastcall TForm1::Timer1Timer(TObject *Sender)
{
	DoubleBuffered = true;
	if (isPaused) return;
	StringGrid1->DoubleBuffered = true;
	clear_snake();
	move_snake();
	check_collision();
	eat_apple();
	if (!gameover) {
		draw_snake();}
}

 void __fastcall TForm1::FormKeyDown(TObject *Sender, WORD &Key, TShiftState Shift)
{
	 switch (Key) {
		case VK_UP: if (dy != 1) { dx = 0; dy = -1; } break;
		case VK_DOWN: if (dy != -1) { dx = 0; dy = 1; } break;
		case VK_LEFT: if (dx != 1) { dx = -1; dy = 0; } break;
		case VK_RIGHT: if (dx != -1) { dx = 1; dy = 0; } break;
		case VK_SPACE: if (!gameover) { isPaused = !isPaused; } break;
	}
}

void __fastcall TForm1::StartGameClick(TObject *Sender)
{
 MainMenu1->Items->Items[0]->Visible = false;
 MainMenu1->Items->Items[1]->Visible = false;
 Image1->Visible = false;
 Label1->Visible = true;
 Label1->Caption = "Очки: " + IntToStr(score);
 StringGrid1->Visible = true;
 Sleep(350);
 clear_field();
 new_game();
}

 void __fastcall TForm1::FormCreate(TObject *Sender)
{
Timer1->Interval = 400;
Timer1->Enabled = false;
StringGrid1->Visible = false;
Label1->Visible = false;
}

void __fastcall TForm1::StringGrid1DrawCell(TObject *Sender, int ACol, int ARow,
	  TRect &Rect, TGridDrawState State)
{
if (State.Contains(gdSelected))
	{
		// Устанавливаем цвет фона и текста ячейки
		StringGrid1->Canvas->Brush->Color = clWhite;
		StringGrid1->Canvas->Font->Color = clBlack;
		// Заполняем ячейку цветом
		StringGrid1->Canvas->FillRect(Rect);
		// Рисуем текст в ячейке
		StringGrid1->Canvas->TextOut(Rect.Left, Rect.Top, StringGrid1->Cells[ACol][ARow]);
	}

Graphics::TBitmap *Bitmap = new Graphics::TBitmap;
try
{ // Проверяем, что находится в ячейке
		AnsiString cellContent = StringGrid1->Cells[ACol][ARow];
		if (cellContent == "A") {// Загружаем изображение яблока
		Bitmap->LoadFromFile("apple.bmp");}
	else if (cellContent == "Sh")
	{Bitmap->LoadFromFile("snake_horizontal.bmp");}

	else if (cellContent == "Sv")
	{Bitmap->LoadFromFile("snake_vertical.bmp");}

	else if (cellContent == "H"){
// Загружаем изображение головы змеи в зависимости от направления
	if (dx == 0 && dy == -1){
	Bitmap->LoadFromFile("head_up.bmp");
	} else if (dx == 0 && dy == 1) {
	Bitmap->LoadFromFile("head_down.bmp");
	} else if (dx == -1 && dy == 0) {
	Bitmap->LoadFromFile("head_left.bmp");
	} else if (dx == 1 && dy == 0) {
	Bitmap->LoadFromFile("head_right.bmp");
	}
	}

	else if (cellContent == "T")
	{
	// Загружаем изображение хвоста змеи в зависимости от направления
	if (tail_dx == 0 && tail_dy == -1) {
	Bitmap->LoadFromFile("tail_up.bmp");
	} else if (tail_dx == 0 && tail_dy == 1) {
	Bitmap->LoadFromFile("tail_down.bmp");
	} else if (tail_dx == -1 && tail_dy == 0) {
	Bitmap->LoadFromFile("tail_left.bmp");
	} else if (tail_dx == 1 && tail_dy == 0) {
	Bitmap->LoadFromFile("tail_right.bmp");
	}
	}
	else if (cellContent == "BL") {
	Bitmap->LoadFromFile("body_bottomleft.bmp");
	} else if (cellContent == "BR") {
	Bitmap->LoadFromFile("body_bottomright.bmp");
	} else if (cellContent == "TL") {
	Bitmap->LoadFromFile("body_topleft.bmp");
	} else if (cellContent == "TR") {
	Bitmap->LoadFromFile("body_topright.bmp");
	}
	else {
	Bitmap->LoadFromFile("grass.bmp");
	}
	// Рисуем изображение в ячейке
	StringGrid1->Canvas->StretchDraw(Rect, Bitmap);
	}
	catch(...)
	{
	// Обрабатываем исключения
	}
	delete Bitmap;
}
//---------------------------------------------------------------------------
 void __fastcall TForm1::ExitClick(TObject *Sender)
{Close();}
//Уровни сложности
//лёгкая
void __fastcall TForm1::EasyClick(TObject *Sender)
{ Timer1->Interval = 150;
  Easy->Checked = true;
  Medium->Checked = false;
  Hard->Checked = false;}
//средняя
void __fastcall TForm1::MediumClick(TObject *Sender)
{ Timer1->Interval = 100;
   Medium->Checked = true;
   Easy->Checked = false;
   Hard->Checked = false;}
//тяжёлый
void __fastcall TForm1::HardClick(TObject *Sender)
{Timer1->Interval = 50;
   Hard->Checked = true;
   Easy->Checked = false;
   Medium->Checked = false;}
// Открытие второго окна "Как играть?"
void __fastcall TForm1::HowToPlayClick(TObject *Sender)
{Form2->ShowModal();}
//Открытие третьего окна "Об авторе"
void __fastcall TForm1::AboutClick(TObject *Sender)
{ Form3->ShowModal();}

